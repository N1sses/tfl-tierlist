// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

generator typegraphql {
  provider = "typegraphql-prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Season {
  number        Int            @id
  name          String?
  startDate     DateTime?
  endDate       DateTime?
  tierlist      Tier[]
  leagues       League[]
  pickRules     PickRules[]
  scheduleRules ScheduleRules? @relation(fields: [scheduleRulesId], references: [id])
  ratingRules   RatingRules?   @relation(fields: [ratingRulesId], references: [id])
  clauses       Clause[]
  managers      User[]

  // opposite fields
  scheduleRulesId Int?
  ratingRulesId   Int?
}

model League {
  id                Int     @id @default(autoincrement())
  rank              Int
  name              String
  currentlyDrafting Boolean @default(false)
  allowedPlayers    User[]
  teams             Team[]
  matches           Match[]

  // opposite fields
  season   Season @relation(fields: [seasonId], references: [number])
  seasonId Int
}

model Match {
  id      Int                 @id @default(autoincrement())
  player1 ParticipatingPlayer @relation("player1", fields: [player1Id], references: [id])
  player2 ParticipatingPlayer @relation("player2", fields: [player2Id], references: [id])
  winner  User?               @relation(fields: [winnerId], references: [id])
  date    DateTime?
  kills   Kill[]
  score   MatchScore?         @relation(fields: [matchId], references: [id])

  // opposite fields
  league    League @relation(fields: [leagueId], references: [id])
  leagueId  Int
  player1Id Int
  player2Id Int
  winnerId  Int?
  matchId   Int
}

model Kill {
  id      Int      @id @default(autoincrement())
  fainter Pokemon? @relation("fainter", fields: [fainterId], references: [id])
  faintee Pokemon  @relation("faintee", fields: [fainteeId], references: [id])

  // opposite fields
  match     Match @relation(fields: [matchId], references: [id])
  matchId   Int
  fainterId Int
  fainteeId Int
}

model Pokemon {
  id Int @id

  // opposite fields
  killsAsFainter Kill[]              @relation("fainter")
  killsAsFaintee Kill[]              @relation("faintee")
  inTeams        Team[]
  inTiers        Tier[]
  builtAs        ConfiguredPokemon[]
}

model MatchScore {
  id           Int @id @default(autoincrement())
  player1Score Int
  player2Score Int

  // opposite fields
  matches Match[]
}

model PickRules {
  id    Int    @id @default(autoincrement())
  tiers Tier[]
  picks Int

  // opposite fields
  season   Season @relation(fields: [seasonId], references: [number])
  seasonId Int
}

model ScheduleRules {

  id                  Int      @id @default(autoincrement())
  matchTurnus         DateTime
  rounds              Int
  playoffs            Boolean
  midSeasonTournament Boolean

  // opposite fields
  seasons Season[]
}

model RatingRules {
  id           Int @id @default(autoincrement())
  scorePerWin  Int
  scorePerDraw Int
  scorePerLoss Int

  // opposite fields
  season Season[]
}

model Clause {
  id          Int     @id @default(autoincrement())
  title       String?
  description String

  // opposite fields
  season   Season @relation(fields: [seasonId], references: [number])
  seasonId Int
}

model Tier {
  id              Int          @id @default(autoincrement())
  rank            Int
  name            String
  flavorTexts     FlavorText[]
  emptySearchtext String
  pokemon         Pokemon[]

  // opposite fields
  pickRules    PickRules[]
  Season       Season?     @relation(fields: [seasonNumber], references: [number])
  seasonNumber Int?
}

model FlavorText {
  id    Int    @id @default(autoincrement())
  text  String
  tiers Tier[]
}

model User {
  id       Int     @id @default(autoincrement())
  username String  @unique
  /// @TypeGraphQL.omit(output: true, input: true)
  password String?
  realName String

  // opposite fields
  teams           Team[]
  tokens          Token[]
  managingSeasons Season[]
  roles           Role[]
  allowedLeagues  League[]
  wonMatches      Match[]
}

model Token {
  id         Int       @id @default(autoincrement())
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  type       TokenType
  valid      Boolean   @default(true)
  expiration DateTime

  // opposite fields
  user   User? @relation(fields: [userId], references: [id])
  userId Int?
}

enum TokenType {
  SIGNUP
  API
}

enum Role {
  ADMIN
  INVITER
  PLAYER
  VIEWER
}

model Team {
  id       Int       @id @default(autoincrement())
  teamName String
  teamLogo String
  person   User      @relation(fields: [userId], references: [id])
  pokemon  Pokemon[]

  // opposite fields
  league          League?               @relation(fields: [leagueId], references: [id])
  leagueId        Int?
  userId          Int
  // pokemonIds      String[]
  participatingAs ParticipatingPlayer[]
}

model Stats {
  id    Int @id @default(autoincrement())
  hp    Int
  atk   Int
  def   Int
  spatk Int
  spdef Int
  speed Int

  usedAsIvsIn ConfiguredPokemon[] @relation("ivs")
  usedAsEvsIn ConfiguredPokemon[] @relation("evs")
}

model ParticipatingPlayer {
  id                 Int                 @id @default(autoincrement())
  player             Team                @relation(fields: [playerId], references: [id])
  roster             ConfiguredPokemon[]
  vodLink            String?
  showdownReplayLink String?
  liveStreamLink     String?

  // opposite fields
  matchupAsPlayer1  Match[] @relation("player1")
  matchupsAsPlayer2 Match[] @relation("player2")
  playerId          Int
}

model ConfiguredPokemon {
  id       Int     @id @default(autoincrement())
  pokemon  Pokemon @relation(fields: [pokemonId], references: [id])
  nickname String?
  shiny    Boolean
  evs      Stats   @relation("evs", fields: [evsId], references: [id])
  ivs      Stats   @relation("ivs", fields: [ivsId], references: [id])
  nature   String
  ability  String
  moves    Move[]
  item     String

  // opposite fields
  inRosterOf ParticipatingPlayer @relation(fields: [rosterId], references: [id])
  rosterId   Int
  pokemonId  Int
  evsId      Int
  ivsId      Int
}

model Move {
  name                String             @id
  ConfiguredPokemon   ConfiguredPokemon? @relation(fields: [configuredPokemonId], references: [id])
  configuredPokemonId Int?
}
